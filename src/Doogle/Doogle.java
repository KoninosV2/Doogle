package Doogle;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.lucene.index.Term;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.search.TopDocs;

/**
 *
 * @author KONIN
 */
public class Doogle extends javax.swing.JFrame {

    private final LuceneUser user = new LuceneUser();
    private FileSplitter splitter;
    private DefaultListModel dlm;
    private DefaultTableModel dtm;

    /**
     * Creates new form Doogle
     */
    public Doogle() {
        initComponents();
    }

    public static void emptyFolder(File folder) {
        System.out.println("delete" + folder.getPath());
        if (folder.list().length > 0) {
            File[] files = folder.listFiles();
            for (File f : files) {
                if (!f.isDirectory()) {
                    f.delete();
                } else {
                    emptyFolder(f);
                }
            }
        }
        if (!folder.getAbsolutePath().equals(LuceneConstants.SPLITDIR)) {
            folder.delete();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBox = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        placesCheckbox = new javax.swing.JCheckBox();
        peopleCheckbox = new javax.swing.JCheckBox();
        titleCheckbox = new javax.swing.JCheckBox();
        bodyCheckbox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        maxResultsBox = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addFilesMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        howToMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Doogle - Βιτουλαδίτης Κωνσταντίνος");
        setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        setLocation(new java.awt.Point(300, 300));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(876, 657));
        setName("frame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        searchBox.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        searchBox.setName(""); // NOI18N
        searchBox.setPreferredSize(new java.awt.Dimension(59, 25));

        addButton.setText("Add Files...");
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setPreferredSize(new java.awt.Dimension(100, 23));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setPreferredSize(new java.awt.Dimension(80, 23));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchButton.setMaximumSize(new java.awt.Dimension(80, 23));
        searchButton.setMinimumSize(new java.awt.Dimension(80, 23));
        searchButton.setPreferredSize(new java.awt.Dimension(80, 23));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Close");
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.setPreferredSize(new java.awt.Dimension(80, 23));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        placesCheckbox.setText("<PLACES>");

        peopleCheckbox.setText("<PEOPLE>");

        titleCheckbox.setSelected(true);
        titleCheckbox.setText("<TITLE>");

        bodyCheckbox.setSelected(true);
        bodyCheckbox.setText("<BODY>");

        jLabel1.setText("Search in:");

        jLabel2.setText("Number of top results displayed:");

        maxResultsBox.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        maxResultsBox.setValue(10);

        jLabel3.setText("Input Files:");

        inputList.setModel(new DefaultListModel<File>());
        jScrollPane2.setViewportView(inputList);

        jLabel4.setText("Results:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Title", "Path", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(22);
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setText("Search Querry:");

        jMenu1.setText("File");

        addFilesMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        addFilesMenu.setText("Add Files...");
        addFilesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jMenu1.add(addFilesMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        howToMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        howToMenu.setText("How to use...");
        howToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                howToMenuActionPerformed(evt);
            }
        });
        jMenu2.add(howToMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(266, 266, 266)
                                .addComponent(jLabel4))
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(placesCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(peopleCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(titleCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bodyCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxResultsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(placesCheckbox)
                    .addComponent(peopleCheckbox)
                    .addComponent(titleCheckbox)
                    .addComponent(bodyCheckbox)
                    .addComponent(jLabel2)
                    .addComponent(maxResultsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        final JFileChooser fc = new JFileChooser(new File(System.getProperty("user.home") + "\\Desktop"));
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setDialogTitle("Add Files...");
        fc.setMultiSelectionEnabled(true);
        fc.setAcceptAllFileFilterUsed(false);
        int returnVal = fc.showOpenDialog(Doogle.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fc.getSelectedFiles();
            for (File file : selectedFiles) {
                if (dlm.contains(file)) {
                    continue;
                }
                splitter = new FileSplitter(file.getPath());
                try {
                    ArrayList<File> filesInserted = splitter.split();
                    if (filesInserted.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "No files were inserted", "Warning", JOptionPane.WARNING_MESSAGE);
                    } else {
                        for (File f : filesInserted) {
                            dlm.addElement(f);
                        }
                    }
                } catch (IOException e) {
                    System.out.println(e);
                }

            }
            try {
                user.createIndex();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        try {
            if (!searchBox.getText().isEmpty()) {
                dtm.setNumRows(0);
                ArrayList<String[]> results = user.search(PrepareText.prepare(searchBox.getText()), (int) maxResultsBox.getModel().getValue(), getSelectedFields());
                if (results.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "The search returned no results!", "Nothing Found", JOptionPane.ERROR_MESSAGE);
                } else {
                    for (String[] result : results) {
                        dtm.addRow(result);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "No query was inserted", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException | ParseException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //Term term = new Term(FIELD_PATH, "C:\\projects\\workspace\\demo\\filesToIndex\\nicole-foods.txt");

        if (inputList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select a file from the list to delete", "No File Selected", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                File selectedFile = (File) inputList.getSelectedValue();
                user.deleteIndexFile(new Term(LuceneConstants.FATHER, selectedFile.getName()));
                System.out.println(selectedFile.getParentFile());
                dlm.removeElementAt(inputList.getSelectedIndex());
                TimeUnit.SECONDS.sleep(1);
                emptyFolder(new File(LuceneConstants.SPLITDIR + "\\" + selectedFile.getName()));
            } catch (IOException | ParseException ex) {
                System.out.println(ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Doogle.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        inputList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inputList.setCellRenderer(new FileRenderer(true));
        //inputList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        dlm = (DefaultListModel) inputList.getModel();
        dtm = (DefaultTableModel) jTable1.getModel();
        File splitDir = new File(LuceneConstants.SPLITDIR);
        if (!splitDir.exists()) {
            splitDir.mkdir();
        } else {
            emptyFolder(splitDir);
        }
        jTable1.getColumn("#").setMaxWidth(25);
        jTable1.getColumn("#").setMinWidth(25);
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int selectedRow = jTable1.getSelectedRow();
                    try {
                        Desktop.getDesktop().open(new File((String) jTable1.getValueAt(selectedRow, 2)));
                    } catch (IOException ex) {
                        System.out.println(ex);
                    }
                }
            }
        }
        );

    }//GEN-LAST:event_formWindowOpened

    private void howToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_howToMenuActionPerformed
        String info = "<html><center>"
                + "Add text files to be indexed with 'Add Files...' button (.txt, .sgm)."
                + "<br>"
                + "<br>"
                + "Delete input files and index by selecting them <br> on the input list and clicking the 'Delete' button."
                + "<br>"
                + "<br>"
                + "Select the tags that you want to search with the tick boxes."
                + "<br>"
                + "<br>"
                + "Select the number of top results you want to be displayed with the spinner. (0 for all)"
                + "<br>"
                + "<br>"
                + "Insert your search query in the text box and click the 'Search' button"
                + "<br><br>Supported Query Examples<br></center>"
                + "Vector Space Search - word1 word2"
                + "<br>"
                + "Boolean Search - word1 AND word2 NOT word3"
                + "<br>"
                + "Phrase Search - \"word1 word2\""
                + "</html>";

        JOptionPane optionPane = new JOptionPane(info);
        optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        JDialog dialog = optionPane.createDialog(optionPane, "How to use Doogle");

        dialog.setVisible(true);
    }//GEN-LAST:event_howToMenuActionPerformed

    private String[] getSelectedFields() {
        ArrayList<String> selected = new ArrayList<>();
        if (placesCheckbox.isSelected()) {
            selected.add(LuceneConstants.PLACES);
        }
        if (peopleCheckbox.isSelected()) {
            selected.add(LuceneConstants.PEOPLE);
        }
        if (titleCheckbox.isSelected()) {
            selected.add(LuceneConstants.TITLE);
        }
        if (bodyCheckbox.isSelected()) {
            selected.add(LuceneConstants.BODY);
        }
        return selected.toArray(new String[0]);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Doogle.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Doogle().setVisible(true);

        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JMenuItem addFilesMenu;
    private javax.swing.JCheckBox bodyCheckbox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JMenuItem howToMenu;
    private javax.swing.JList inputList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JSpinner maxResultsBox;
    private javax.swing.JCheckBox peopleCheckbox;
    private javax.swing.JCheckBox placesCheckbox;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBox titleCheckbox;
    // End of variables declaration//GEN-END:variables
}

class FileRenderer extends DefaultListCellRenderer {

    private boolean pad;
    private Border padBorder = new EmptyBorder(3, 3, 3, 3);

    FileRenderer(boolean pad) {
        this.pad = pad;
    }

    @Override
    public Component getListCellRendererComponent(
            JList list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus) {

        Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        JLabel l = (JLabel) c;
        File f = (File) value;
        l.setText(f.getAbsolutePath());
        l.setIcon(FileSystemView.getFileSystemView().getSystemIcon(f));
        if (pad) {
            l.setBorder(padBorder);
        }

        return l;
    }
}
